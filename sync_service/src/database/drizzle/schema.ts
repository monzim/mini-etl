import {
  boolean,
  integer,
  jsonb,
  pgSchema,
  text,
  timestamp,
} from 'drizzle-orm/pg-core';

export const schema = pgSchema('github_data');

export const PullRequests = schema.table('pullrequests', {
  id: integer('id').primaryKey().notNull(),
  repository_id: integer('repository_id')
    .notNull()
    .references(() => Repository.id, {
      onDelete: 'restrict',
      onUpdate: 'cascade',
    }),
  url: text('url'),
  node_id: text('node_id'),
  number: integer('number'),
  state: text('state'),
  locked: boolean('locked'),
  title: text('title'),
  user: jsonb('user'),
  body: text('body'),
  created_at: timestamp('created_at', { precision: 3, mode: 'string' }),
  updated_at: timestamp('updated_at', { precision: 3, mode: 'string' }),
  closed_at: timestamp('closed_at', { precision: 3, mode: 'string' }),
  merged_at: timestamp('merged_at', { precision: 3, mode: 'string' }),
  merge_commit_sha: text('merge_commit_sha'),
  assignee: jsonb('assignee'),
  assignees: jsonb('assignees').array(),
  requested_reviewers: jsonb('requested_reviewers').array(),
  requested_teams: jsonb('requested_teams').array(),
  milestone: jsonb('milestone'),
  draft: boolean('draft'),
  head: jsonb('head'),
  base: jsonb('base'),
  author_association: text('author_association'),
  auto_merge: jsonb('auto_merge'),
  active_lock_reason: text('active_lock_reason'),
});

export const Issues = schema.table('issues', {
  id: integer('id').primaryKey().notNull(),
  repository_id: integer('repository_id')
    .notNull()
    .references(() => Repository.id, {
      onDelete: 'restrict',
      onUpdate: 'cascade',
    }),
  url: text('url'),
  node_id: text('node_id'),
  number: integer('number'),
  title: text('title'),
  user: jsonb('user'),
  labels: jsonb('labels').array(),
  state: text('state'),
  locked: boolean('locked'),
  assignee: jsonb('assignee'),
  assignees: jsonb('assignees').array(),
  milestone: jsonb('milestone'),
  comments: integer('comments'),
  created_at: timestamp('created_at', { precision: 3, mode: 'string' }),
  updated_at: timestamp('updated_at', { precision: 3, mode: 'string' }),
  closed_at: timestamp('closed_at', { precision: 3, mode: 'string' }),
  author_association: text('author_association'),
  active_lock_reason: text('active_lock_reason'),
  draft: boolean('draft'),
  pull_request: jsonb('pull_request'),
  body: text('body'),
  reactions: jsonb('reactions'),
  performed_via_github_app: jsonb('performed_via_github_app'),
  state_reason: text('state_reason'),
});

export const Repository = schema.table('repository', {
  id: integer('id').primaryKey().notNull(),
  node_id: text('node_id'),
  name: text('name'),
  full_name: text('full_name'),
  private: boolean('private'),
  description: text('description'),
  fork: boolean('fork'),
  url: text('url'),
  created_at: timestamp('created_at', { precision: 3, mode: 'string' }),
  updated_at: timestamp('updated_at', { precision: 3, mode: 'string' }),
  pushed_at: timestamp('pushed_at', { precision: 3, mode: 'string' }),
  homepage: text('homepage'),
  size: integer('size'),
  stargazers_count: integer('stargazers_count'),
  watchers_count: integer('watchers_count'),
  language: text('language'),
  has_issues: boolean('has_issues'),
  has_projects: boolean('has_projects'),
  has_downloads: boolean('has_downloads'),
  has_wiki: boolean('has_wiki'),
  has_pages: boolean('has_pages'),
  has_discussions: boolean('has_discussions'),
  forks_count: integer('forks_count'),
  archived: boolean('archived'),
  disabled: boolean('disabled'),
  open_issues_count: integer('open_issues_count'),
  license: text('license'),
  allow_forking: boolean('allow_forking'),
  is_template: boolean('is_template'),
  web_commit_signoff_required: boolean('web_commit_signoff_required'),
  topics: text('topics').array(),
  visibility: text('visibility'),
  forks: integer('forks'),
  open_issues: integer('open_issues'),
  watchers: integer('watchers'),
  default_branch: text('default_branch'),
});
